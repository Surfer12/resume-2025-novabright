[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "meta-optimization-framework"
version = "0.1.0"
description = "Cognitive-inspired deep learning optimization framework"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Ryan Oates", email = "ryan.oates@ucsb.edu"}
]
maintainers = [
    {name = "Ryan Oates", email = "ryan.oates@ucsb.edu"}
]
keywords = [
    "cognitive-science",
    "deep-learning", 
    "optimization",
    "neuro-symbolic",
    "bias-modeling",
    "human-ai-collaboration"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "scikit-learn>=1.0.0",
    "torch>=1.12.0",
    "torchvision>=0.13.0",
    "optuna>=3.0.0",
    "scikit-optimize>=0.9.0",
    "sympy>=1.9.0",
    "networkx>=2.6.0",
    "statsmodels>=0.13.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    "joblib>=1.1.0",
    "h5py>=3.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.2.0",
    "pytest-cov>=3.0.0",
    "pytest-mock>=3.6.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.910",
    "pre-commit>=2.15.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.12.0",
    "myst-parser>=0.18.0",
]
experiments = [
    "wandb>=0.12.0",
    "tensorboard>=2.8.0",
    "psychopy>=2022.1.0",
    "jupyter>=1.0.0",
    "ipywidgets>=7.6.0",
]
full = [
    "meta-optimization-framework[dev,docs,experiments]",
    "tensorflow>=2.8.0",
    "gpytorch>=1.6.0",
    "pingouin>=0.5.0",
    "zarr>=2.10.0",
    "ray>=1.9.0",
    "brian2>=2.5.0",
]

[project.urls]
Homepage = "https://github.com/Surfer12/meta-optimization-framework"
Documentation = "https://meta-optimization-framework.readthedocs.io/"
Repository = "https://github.com/Surfer12/meta-optimization-framework.git"
"Bug Tracker" = "https://github.com/Surfer12/meta-optimization-framework/issues"
Changelog = "https://github.com/Surfer12/meta-optimization-framework/blob/main/CHANGELOG.md"

[project.scripts]
meta-optimize = "src.core.meta_optimization:main"
cognitive-benchmark = "src.evaluation.cognitive_authenticity:main"
failure-analyze = "src.utils.failure_documentation:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.json", "*.txt", "*.md"]

# Black configuration
[tool.black]
line-length = 127
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 127
known_first_party = ["src"]
known_third_party = ["torch", "numpy", "scipy", "pandas", "sklearn", "matplotlib", "seaborn", "plotly"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "sklearn.*",
    "scipy.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "optuna.*",
    "wandb.*",
    "tensorboard.*",
    "psychopy.*",
    "brian2.*",
    "zarr.*",
    "ray.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance benchmarks",
    "cognitive: marks tests as cognitive validation tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"