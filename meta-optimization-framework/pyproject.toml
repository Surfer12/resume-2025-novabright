[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "meta-optimization-framework"
version = "0.1.0"
description = "A comprehensive framework for cognitive-inspired deep learning optimization"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Ryan Oates", email = "ryan.oates@ucsb.edu"}
]
maintainers = [
    {name = "Ryan Oates", email = "ryan.oates@ucsb.edu"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
keywords = ["cognitive-science", "deep-learning", "optimization", "neuro-symbolic", "bias-modeling"]
requires-python = ">=3.8"
dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "scikit-learn>=1.3.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "dash>=2.10.0",
    "statsmodels>=0.14.0",
    "optuna>=3.0.0",
    "scikit-optimize>=0.9.0",
    "psychopy>=2023.1.0",
    "jupyter>=1.0.0",
    "notebook>=6.5.0",
    "ipywidgets>=8.0.0",
    "tqdm>=4.65.0",
    "pyyaml>=6.0",
    "toml>=0.10.0",
    "flask>=2.3.0",
    "werkzeug>=2.3.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.5.0",
    "joblib>=1.3.0",
    "psutil>=5.9.0",
    "memory-profiler>=0.61.0",
    "sympy>=1.12",
    "requests>=2.31.0",
    "urllib3>=2.0.0",
    "h5py>=3.9.0",
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
    "wandb>=0.15.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "jupyter>=1.0.0",
    "notebook>=6.5.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]
experiments = [
    "wandb>=0.15.0",
    "optuna>=3.0.0",
    "mlflow>=2.5.0",
    "tensorboard>=2.13.0",
]
all = [
    "meta-optimization-framework[dev,docs,experiments]"
]

[project.scripts]
meta-optimize = "core.meta_optimization:main"
randomness-study = "experiments.randomness_impact_study:main"
failure-museum = "utils.failure_documentation:main"

[project.urls]
Homepage = "https://github.com/Surfer12/meta-optimization-framework"
Documentation = "https://meta-optimization-framework.readthedocs.io/"
Repository = "https://github.com/Surfer12/meta-optimization-framework.git"
"Bug Tracker" = "https://github.com/Surfer12/meta-optimization-framework/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yml", "*.yaml", "*.json"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | docs/_build
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "scipy.*",
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "dash.*",
    "psychopy.*",
    "wandb.*",
    "optuna.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmark tests",
    "cognitive: marks tests related to cognitive modeling",
    "statistical: marks tests related to statistical analysis",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml yet)
# See setup.cfg for flake8 configuration